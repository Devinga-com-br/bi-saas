'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Skeleton } from '@/components/ui/skeleton'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { Calendar } from '@/components/ui/calendar'
import { useTenantContext } from '@/contexts/tenant-context'
import { useBranchesOptions } from '@/hooks/use-branches'
import { ChevronDown, ChevronRight, FileDown, TrendingUp, Calendar as CalendarIcon, DollarSign } from 'lucide-react'
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { logModuleAccess } from '@/lib/audit'
import { createClient } from '@/lib/supabase/client'
import { format, subDays, startOfMonth } from 'date-fns'
import { cn } from '@/lib/utils'
import { ChartDespesas } from '@/components/despesas/chart-despesas'

interface Despesa {
  data_despesa: string
  descricao_despesa: string
  fornecedor_id: string | null
  numero_nota: number | null
  serie_nota: string | null
  valor: number
  usuario: string
  observacao: string | null
  data_emissao: string | null
}

interface TipoDespesa {
  tipo_id: number
  tipo_descricao: string
  valor_total: number
  qtd_despesas: number
  despesas: Despesa[]
}

interface Departamento {
  dept_id: number
  dept_descricao: string
  valor_total: number
  qtd_tipos: number
  qtd_despesas: number
  tipos: TipoDespesa[]
}

interface GraficoData {
  mes: string
  valor: number
}

interface ReportData {
  totalizador: {
    valorTotal: number
    qtdRegistros: number
    qtdDepartamentos: number
    qtdTipos: number
    mediaDepartamento: number
  }
  grafico: GraficoData[]
  departamentos: Departamento[]
}

export default function DespesasPage() {
  const { currentTenant, userProfile } = useTenantContext()
  const { options: filiaisOptions } = useBranchesOptions({
    tenantId: currentTenant?.id,
  })

  // Estados dos filtros
  const [filialId, setFilialId] = useState<string>('')
  const [dataInicial, setDataInicial] = useState<Date | undefined>(startOfMonth(new Date()))
  const [dataFinal, setDataFinal] = useState<Date | undefined>(subDays(new Date(), 1))

  // Estados dos dados
  const [data, setData] = useState<ReportData | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  // Estados de expansão
  const [expandedDepts, setExpandedDepts] = useState<Record<number, boolean>>({})
  const [expandedTipos, setExpandedTipos] = useState<Record<string, boolean>>({})

  // Definir filial padrão quando opções estiverem disponíveis
  useEffect(() => {
    if (filiaisOptions.length > 0 && !filialId) {
      setFilialId(filiaisOptions[0].value)
    }
  }, [filiaisOptions, filialId])

  // Log de acesso ao módulo
  useEffect(() => {
    const logAccess = async () => {
      if (currentTenant && userProfile) {
        const supabase = createClient()
        const { data: { user } } = await supabase.auth.getUser()
        
        logModuleAccess({
          module: 'despesas',
          tenantId: currentTenant.id,
          userName: userProfile.full_name,
          userEmail: user?.email || ''
        })
      }
    }
    logAccess()
  }, [currentTenant, userProfile])

  // Buscar dados automaticamente quando filtros mudarem
  useEffect(() => {
    if (currentTenant?.supabase_schema && filialId && dataInicial && dataFinal) {
      fetchData()
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentTenant?.supabase_schema, filialId, dataInicial, dataFinal])

  const fetchData = async () => {
    if (!currentTenant?.supabase_schema || !filialId || !dataInicial || !dataFinal) return

    setLoading(true)
    setError('')

    try {
      const params = new URLSearchParams({
        schema: currentTenant.supabase_schema,
        filial_id: filialId,
        data_inicial: format(dataInicial, 'yyyy-MM-dd'),
        data_final: format(dataFinal, 'yyyy-MM-dd'),
      })

      const response = await fetch(`/api/despesas/hierarquia?${params}`)
      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Erro ao buscar dados')
      }

      setData(result)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao buscar dados')
      console.error('Error fetching data:', err)
    } finally {
      setLoading(false)
    }
  }

  const handleExportarExcel = async () => {
    if (!data || !currentTenant) return

    try {
      setLoading(true)

      // Implementar exportação para Excel
      alert('Funcionalidade de exportação será implementada em breve')
    } catch (err) {
      console.error('Erro ao exportar:', err)
      alert('Erro ao exportar dados')
    } finally {
      setLoading(false)
    }
  }

  const toggleDept = (deptId: number) => {
    setExpandedDepts(prev => ({ ...prev, [deptId]: !prev[deptId] }))
  }

  const toggleTipo = (key: string) => {
    setExpandedTipos(prev => ({ ...prev, [key]: !prev[key] }))
  }

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
    }).format(value)
  }

  const formatDate = (dateString: string) => {
    if (!dateString) return '-'
    try {
      return format(new Date(dateString), 'dd/MM/yyyy')
    } catch {
      return dateString
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Módulo de Despesas</h1>
          <p className="text-muted-foreground">
            Análise de despesas com visão hierárquica por departamento
          </p>
        </div>
        
        {data && data.totalizador.qtdRegistros > 0 && (
          <Button
            onClick={handleExportarExcel}
            disabled={loading}
            variant="outline"
            className="gap-2"
          >
            <FileDown className="h-4 w-4" />
            Exportar Excel
          </Button>
        )}
      </div>

      {/* Filtros */}
      <Card>
        <CardHeader>
          <CardTitle>Filtros</CardTitle>
          <CardDescription>Configure os filtros para análise de despesas</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 lg:flex-row lg:items-end lg:gap-4">
            {/* Filial */}
            <div className="flex flex-col gap-2 w-full sm:w-auto">
              <Label>Filial</Label>
              <div className="h-10">
                <Select value={filialId} onValueChange={setFilialId}>
                  <SelectTrigger className="w-full sm:w-[200px] h-10">
                    <SelectValue placeholder="Selecione a filial" />
                  </SelectTrigger>
                  <SelectContent>
                    {filiaisOptions.map((filial) => (
                      <SelectItem key={filial.value} value={filial.value}>
                        {filial.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Data Inicial */}
            <div className="flex flex-col gap-2 w-full sm:w-auto">
              <Label>Data Inicial</Label>
              <div className="h-10">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full sm:w-[160px] h-10 justify-start text-left font-normal",
                        !dataInicial && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {dataInicial ? format(dataInicial, "dd/MM/yyyy") : <span>Selecione...</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar 
                      mode="single" 
                      selected={dataInicial} 
                      onSelect={setDataInicial}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>
            </div>

            {/* Data Final */}
            <div className="flex flex-col gap-2 w-full sm:w-auto">
              <Label>Data Final</Label>
              <div className="h-10">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full sm:w-[160px] h-10 justify-start text-left font-normal",
                        !dataFinal && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {dataFinal ? format(dataFinal, "dd/MM/yyyy") : <span>Selecione...</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar 
                      mode="single" 
                      selected={dataFinal} 
                      onSelect={setDataFinal}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>
            </div>

          </div>
        </CardContent>
      </Card>

      {/* Gráfico */}
      {!loading && data && data.grafico && data.grafico.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              Despesas por Mês
            </CardTitle>
            <CardDescription>Evolução mensal das despesas no período selecionado</CardDescription>
          </CardHeader>
          <CardContent>
            <ChartDespesas data={data.grafico} />
          </CardContent>
        </Card>
      )}

      {/* Totalizadores */}
      {!loading && data && (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Total de Despesas
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatCurrency(data.totalizador.valorTotal)}</div>
              <p className="text-xs text-muted-foreground mt-1">
                {data.totalizador.qtdRegistros} registros
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Departamentos
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{data.totalizador.qtdDepartamentos}</div>
              <p className="text-xs text-muted-foreground mt-1">
                {data.totalizador.qtdTipos} tipos de despesa
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Média por Departamento
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {formatCurrency(data.totalizador.mediaDepartamento)}
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                Distribuição média
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Período
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-sm font-bold">
                {dataInicial && format(dataInicial, 'dd/MM/yyyy')} até {dataFinal && format(dataFinal, 'dd/MM/yyyy')}
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                {filiaisOptions.find(f => f.value === filialId)?.label || 'N/A'}
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Loading */}
      {loading && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
            </div>
          </CardContent>
        </Card>
      )}

      {/* Erro */}
      {error && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="pt-6">
            <p className="text-sm text-red-600">{error}</p>
          </CardContent>
        </Card>
      )}

      {/* Listagem Hierárquica */}
      {!loading && data && data.departamentos && data.departamentos.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-5 w-5" />
              Despesas por Departamento
            </CardTitle>
            <CardDescription>
              Visualização hierárquica: Departamento → Tipo de Despesa → Despesa Individual
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {data.departamentos.map((dept) => (
                <Collapsible
                  key={dept.dept_id}
                  open={expandedDepts[dept.dept_id]}
                  onOpenChange={() => toggleDept(dept.dept_id)}
                >
                  <div className="rounded-lg border bg-card">
                    <CollapsibleTrigger className="flex w-full items-center justify-between p-4 hover:bg-accent/50">
                      <div className="flex items-center gap-2">
                        {expandedDepts[dept.dept_id] ? (
                          <ChevronDown className="h-4 w-4" />
                        ) : (
                          <ChevronRight className="h-4 w-4" />
                        )}
                        <span className="font-bold text-base">
                          {dept.dept_descricao}
                        </span>
                      </div>
                      <div className="flex items-center gap-6">
                        <div className="text-right">
                          <div className="text-xs text-muted-foreground">Valor Total</div>
                          <div className="font-semibold text-sm">
                            {formatCurrency(dept.valor_total)}
                          </div>
                        </div>
                        <div className="text-right">
                          <Badge variant="secondary">
                            {dept.qtd_tipos} tipos, {dept.qtd_despesas} despesas
                          </Badge>
                        </div>
                      </div>
                    </CollapsibleTrigger>

                    <CollapsibleContent>
                      <div className="border-t p-4 space-y-2">
                        {dept.tipos?.map((tipo) => {
                          const tipoKey = `${dept.dept_id}-${tipo.tipo_id}`
                          return (
                            <Collapsible
                              key={tipoKey}
                              open={expandedTipos[tipoKey]}
                              onOpenChange={() => toggleTipo(tipoKey)}
                            >
                              <div className="rounded-lg border bg-card/50">
                                <CollapsibleTrigger className="flex w-full items-center justify-between p-3 hover:bg-accent/50">
                                  <div className="flex items-center gap-2">
                                    {expandedTipos[tipoKey] ? (
                                      <ChevronDown className="h-3.5 w-3.5" />
                                    ) : (
                                      <ChevronRight className="h-3.5 w-3.5" />
                                    )}
                                    <span className="font-semibold text-sm">
                                      {tipo.tipo_descricao}
                                    </span>
                                  </div>
                                  <div className="flex items-center gap-4">
                                    <div className="text-right">
                                      <div className="text-xs text-muted-foreground">Valor</div>
                                      <div className="font-medium text-xs">
                                        {formatCurrency(tipo.valor_total)}
                                      </div>
                                    </div>
                                    <Badge variant="outline" className="text-xs">
                                      {tipo.qtd_despesas} despesas
                                    </Badge>
                                  </div>
                                </CollapsibleTrigger>

                                <CollapsibleContent>
                                  <div className="border-t">
                                    <Table>
                                      <TableHeader>
                                        <TableRow>
                                          <TableHead className="text-xs w-[100px]">Data</TableHead>
                                          <TableHead className="text-xs">Descrição</TableHead>
                                          <TableHead className="text-xs w-[120px]">Fornecedor</TableHead>
                                          <TableHead className="text-xs w-[100px]">Nota</TableHead>
                                          <TableHead className="text-xs w-[60px]">Série</TableHead>
                                          <TableHead className="text-right text-xs w-[120px]">Valor</TableHead>
                                          <TableHead className="text-xs w-[100px]">Usuário</TableHead>
                                        </TableRow>
                                      </TableHeader>
                                      <TableBody>
                                        {tipo.despesas?.map((despesa, idx) => (
                                          <TableRow key={`${tipoKey}-${idx}`}>
                                            <TableCell className="text-xs">
                                              {formatDate(despesa.data_despesa)}
                                            </TableCell>
                                            <TableCell className="text-xs">
                                              <div className="max-w-[300px] truncate" title={despesa.descricao_despesa || '-'}>
                                                {despesa.descricao_despesa || '-'}
                                              </div>
                                            </TableCell>
                                            <TableCell className="text-xs">
                                              {despesa.fornecedor_id || '-'}
                                            </TableCell>
                                            <TableCell className="text-xs">
                                              {despesa.numero_nota || '-'}
                                            </TableCell>
                                            <TableCell className="text-xs">
                                              {despesa.serie_nota || '-'}
                                            </TableCell>
                                            <TableCell className="text-right text-xs font-semibold">
                                              {formatCurrency(despesa.valor)}
                                            </TableCell>
                                            <TableCell className="text-xs">
                                              {despesa.usuario || '-'}
                                            </TableCell>
                                          </TableRow>
                                        ))}
                                      </TableBody>
                                    </Table>
                                  </div>
                                </CollapsibleContent>
                              </div>
                            </Collapsible>
                          )
                        })}
                      </div>
                    </CollapsibleContent>
                  </div>
                </Collapsible>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Sem dados */}
      {!loading && data && (!data.departamentos || data.departamentos.length === 0) && (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <DollarSign className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-4 text-lg font-semibold">Nenhuma despesa encontrada</h3>
              <p className="mt-2 text-sm text-muted-foreground">
                Não há despesas registradas para o período e filial selecionados.
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
